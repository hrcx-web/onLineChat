<template>
  <div class="app-container">
    <div class="top">
      <div class="top-left">任务奖励配置</div>
      <div class="top-right">
        <el-button size="small" :disabled="sels.length === 0" type="danger" @click="deleteFileOrDirectory(sels)">批量删除</el-button>
        <el-button type="primary" size="small" @click="showDialog('add')">新增</el-button>
        <el-button size="mini" type="success" :disabled="sels.length === 0" @click="ToObtain(sels)">配置奖励</el-button>
      </div>
    </div>
    <el-table
      v-loading="tableData.loading"
      :data="tableData.array"
      border
      fit
      highlight-current-row
      @selection-change="selsChange"
    >
      <!-- 复选框 -->
      <el-table-column type="selection" align="center" />
      <el-table-column align="center" label="礼物id">
        <template slot-scope="scope">{{ scope.row.giftId }}</template>
      </el-table-column>
      <el-table-column align="center" label="礼物图标">
        <template slot-scope="scope"> <el-image
          style="width: 100px; height: 100px; cursor: pointer;"
          :src="scope.row.giftIcon"
          @click="changeImg(scope.row)"
        /></template>
      </el-table-column>

      <el-table-column align="center" label="礼物数量/撩币数量">
        <template slot-scope="scope">{{ scope.row.num }}</template>
      </el-table-column>
      <el-table-column align="center" label="类型">
        <template slot-scope="scope">{{ map.type[scope.row.type] }}</template>
      </el-table-column>
      <el-table-column label="操作" width="120px" align="center">
        <template slot-scope="scope">
          <el-row :gutter="20">
            <el-col :span="10" size="mini">
              <el-button size="mini" @click="showDialog('edit' ,scope.row)">编辑</el-button>
            </el-col>
          </el-row>
        </template>
      </el-table-column>
    </el-table>
    <pagination
      :pager-index="pager.pageNo"
      :pager-size="pager.pageSize"
      :pager-total="pager.total"
      @pagination-change="handlePagerChange"
    />
    <el-dialog :visible.sync="dialogVisible.reward" width="450px" :title="`${mode === 'add' ? '新增' : '编辑'}任务奖励配置信息`" center style="z-index: 9999">
      <el-form ref="form" label-position="right" label-width="100px" :validate-on-rule-change="false" :model="form" size="mini">
        <el-row :gutter="10">
          <el-col :span="20">
            <!-- <el-form-item label="礼物图标">
              <div class="icon-container" @click="fakeClick('giftIcon')">
                <i v-if="!form.giftIcon" class="el-icon-plus" />
                <img
                  v-else
                  :src="form.giftIcon"
                  style="width: 100%; height: 100%"
                  alt=""
                >
              </div>
            </el-form-item> -->
            <el-form-item label="礼物数量">
              <el-input v-model="form.num" :step="0.1" min="0" type="number" />
            </el-form-item>
            <el-form-item label="类型">
              <el-select v-model="form.type" placeholder="请选择">
                <el-option v-for="(value, key) in map.type" :key="key" :value="key" :label="value" />
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
      </el-form>
      <input type="file" style="visibility: hidden" class="giftIcon" @change="val => uploadFile(val, ['form','giftIcon'])">
      <div slot="footer" class="dialog-footer">
        <el-button
          size="small"
          @click="dialogVisible.reward=false"
        >取 消</el-button>
        <el-button type="primary" :loading="tableData.loading" size="small" @click="updateSubmit">提交</el-button>
      </div>
    </el-dialog>

    <!-- 图标 -->
    <el-dialog
      title="礼物图标展示"
      center
      :visible.sync="dialogVisible.imgVisible"
      width="30%"
    >
      <el-image :src="editImg.giftIcon" />
    </el-dialog>

    <el-dialog :visible.sync="dialogVisible.ToObtain" width="500px" title="签到任务配置奖励信息" center>
      <el-form ref="forms" label-position="right" :validate-on-rule-change="false" label-width="180px" :model="forms" size="mini">
        <el-row :gutter="5">
          <el-col :span="20">
            <el-form-item label="签到任务第几天">
              <el-select v-model="forms.taskId" placeholder="请选择">
                <el-option v-for="item in map.taskId" :key="item.id" :value="item.id" :label="`第${item.day}天`" />
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button
          size="small"
          @click="dialogVisible.ToObtain=false"
        >取 消</el-button>
        <el-button type="primary" :loading="tableData.loading" size="small" @click="updateSubmitToObtain">提交</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import { rewardConfigList, updateRewardConfig, deleteBatchReward, dayTaskToObtain, dayConfig } from '@/api/taskManagement'
import { initForm, copyObject, clearEmptyItem } from '@/utils/index'
import { uploadQNImg } from '@/api/user'
import Pagination from '@/components/Pagination'
export default {
  name: 'TaskManagement',
  components: {
    Pagination
  },
  data() {
    return {
      mode: '',
      tableData: {

        loading: false,
        array: [],
        row: {}
      },
      pager: {
        pageNo: 1,
        pageSize: 10,
        total: 0
      },

      sels: [],
      map: {
        taskId: {},
        type: {
          1: '礼物',
          2: '撩币'
        }

      },

      form: {
        giftId: '',
        giftIcon: '',
        num: '',
        type: ''

      },
      forms: {
        ids: '',
        taskId: ''
      },

      dialogVisible: {
        reward: false,
        imgVisible: false,
        ToObtain: false
      },
      editImg: ''
    }
  },
  created() {
    this.fetchData()
    this.dayTaskToObtain()
  },
  methods: {
    dayTaskToObtain() {
      dayTaskToObtain().then(res => {
        const { result = {}} = res
        if (Array.isArray(result)) {
          this.map.taskId = result
        }
      })
    },
    fetchData() {
      const ids = this.$route.query.ids
      if (ids) {
        this.tableData.loading = true
        const _form = Object.assign({
          pageNo: this.pager.pageNo,
          pageSize: this.pager.pageSize,
          id: ids
        })
        rewardConfigList(_form).then(res => {
          const { result = {}} = res
          this.tableData.array = result.records
          this.pager.total = result.total // 总数
        }).finally(_ => {
          this.tableData.loading = false
        })
      } else {
        this.tableData.loading = true
        const _form = Object.assign({
          pageNo: this.pager.pageNo,
          pageSize: this.pager.pageSize

        })
        rewardConfigList(_form).then(res => {
          const { result = {}} = res
          this.tableData.array = result.records
          this.pager.total = result.total // 总数
        }).finally(_ => {
          this.tableData.loading = false
        })
      }
    },
    showDialog(mode, item) {
      this.mode = mode
      this.tableData.row = item || {}
      this.form = initForm(this.form)
      if (mode === 'edit') {
        this.form = copyObject(this.form, item, { numberToString: true })
      }
      this.dialogVisible.reward = true
    },
    updateSubmit() {
      this.tableData.loading = true
      let _form = Object.assign({ id: this.tableData.row.id }, this.form)
      _form = clearEmptyItem(_form)
      updateRewardConfig(_form, this.mode).then(res => {
        this.$message.success(res.message)
        this.dialogVisible.reward = false
        this.fetchData()
      }).finally(_ => {
        this.tableData.loading = false
      })
    },
    selsChange(sels) {
      this.sels = sels
    },
    fakeClick(className) {
      const fileInput = document.querySelector(`input[type=file].${className}`)
      fileInput.click()
    },
    uploadFile(e, target) {
      const files = e.target.files
      if (files.length) {
        const formData = new FormData()
        formData.append('multipartFile', files[0])
        uploadQNImg(formData).then((res) => {
          // 新增的
          this[target[0]][target[1]] = res.data
        })
      }
    },
    handlePagerChange(val) {
      this.pager.pageNo = val.index
      this.pager.pageSize = val.size
      this.fetchData()
    },
    deleteFileOrDirectory() {
      const ids = this.sels.map((row) => row.id).join()
      this.$confirm('确定要删除选中的任务奖励配置信息吗?', '提示')
        .then(() => {
          deleteBatchReward({
            ids: ids
          }).then((data) => {
            this.$message.success(data.message)
            this.fetchData()
          })
        })
        .catch((error) => {
          console.log(error)
        })
    },
    changeImg(row) {
      this.dialogVisible.imgVisible = true
      this.editImg = row
    },
    ToObtain() {
      this.forms.ids = this.sels.map((row) => row.id).join()
      this.dialogVisible.ToObtain = true
    },
    updateSubmitToObtain() {
      this.tableData.loading = true
      const _form = Object.assign({
        ids: this.forms.ids,
        taskId: this.forms.taskId
      })
      dayConfig(_form)
        .then(res => {
          this.$message.success(res.message)
          this.dialogVisible.ToObtain = false
          this.fetchData()
        }).finally(_ => {
          this.tableData.loading = false
        })
    }
  }
}

</script>
<style scoped lang="scss">
.icon-container{
  width: 80px;
  height: 80px;
  border-radius: 4px;
  border: 1px dashed #ccc;
  position: relative;
  cursor: pointer;
  i{
    display: block;
    font-size: 24px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}
</style>
