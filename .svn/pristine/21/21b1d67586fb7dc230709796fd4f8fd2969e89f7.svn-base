<template>
  <div class="app-container">
    <div class="header">
      <div class="header-left">软件下载</div>
      <div class="header-right">
        <el-button
          type="primary"
          size="small"
          @click="showDialog('add')"
        >新增</el-button>
      </div>
    </div>

    <el-table
      v-loading="tableData.loading"
      :data="tableData.array"
      border
      fit
      highlight-current-row
    >
      <!-- 复选框 -->
      <el-table-column type="selection" align="center" />
      <!-- <el-table-column align="center" label="软件下载id">
        <template slot-scope="scope">{{ scope.row.id }}</template>
      </el-table-column> -->
      <el-table-column align="center" label="软件名">
        <template slot-scope="scope">{{ scope.row.name }}</template>
      </el-table-column>
      <el-table-column align="center" label="软件版本">
        <template slot-scope="scope">{{ map.type[scope.row.type] }}</template>
      </el-table-column>
      <el-table-column align="center" label="是否强制更新">
        <template slot-scope="scope">{{ map.code[scope.row.code] }}</template>
      </el-table-column>
      <el-table-column align="center" label="app下载地址">
        <template slot-scope="scope">{{ scope.row.apkUrl }}</template>
      </el-table-column>
      <el-table-column align="center" label="分发下载地址">
        <template slot-scope="scope">{{ scope.row.url }}</template>
      </el-table-column>
      <el-table-column align="center" label="apk版本">
        <template slot-scope="scope">{{ scope.row.version }}</template>
      </el-table-column>
      <!-- <el-table-column align="center" label="二维码展示地址">
        <template slot-scope="scope">
          <el-image
            style="width: 100px; height: 100px"
            :src="scope.row.url"
            :preview-src-list="scope.row.srcList"
          />
        </template>
      </el-table-column> -->
      <el-table-column align="center" label="说明">
        <template slot-scope="scope">{{ scope.row.mes }}</template>
      </el-table-column>
      <el-table-column label="操作" width="160" align="center">
        <template slot-scope="scope" class="button">
          <el-row :gutter="6">
            <el-col :span="12">
              <el-button
                size="mini"
                type="danger"
                @click="handleDelete(scope.$index, scope.row)"
              >删除</el-button>
            </el-col>
            <el-col :span="12" size="mini" tyle="margin-top: 5px">
              <el-button
                style="width: 100%"
                size="mini"
                @click="showDialog('edit', scope.row)"
              >编辑</el-button>
            </el-col>
          </el-row>
        </template>
      </el-table-column>
    </el-table>

    <pagination
      :pager-index="pager.pageNo"
      :pager-size="pager.pageSize"
      :pager-total="pager.total"
      @pagination-change="handlePagerChange"
    />
    <!-- 软件下载 -->
    <el-dialog
      :visible.sync="dialogVisible.version"
      width="450px"
      :title="`${mode === 'add' ? '新增' : '编辑'}软件下载信息`"
      center
      style="z-index: 9999"
    >
      <el-form
        ref="form"
        :rules="rules"
        label-position="right"
        :validate-on-rule-change="false"
        label-width="120px"
        :model="form"
        size="mini"
      >
        <el-row :gutter="5">
          <el-col :span="20">
            <el-form-item label="软件名">
              <el-input v-model="form.name" />
            </el-form-item>
            <el-form-item label="软件版本" prop="type">
              <el-select v-model="form.type" placeholder="请选择">
                <el-option
                  v-for="(value, key) in map.type"
                  :key="key"
                  :value="key"
                  :label="value"
                />
              </el-select>
            </el-form-item>
            <el-form-item label="是否强制更新 ">
              <el-select v-model="form.code" placeholder="请选择">
                <el-option
                  v-for="(value, key) in map.code"
                  :key="key"
                  :value="key"
                  :label="value"
                />
              </el-select>
            </el-form-item>
            <el-form-item label="apk版本">
              <el-input v-model="form.version" />
            </el-form-item>
            <el-form-item label="说明">
              <el-input
                v-model="form.mes"
                type="textarea"
                :autosize="{ minRows: 2, maxRows: 4}"
                placeholder="请输入说明"
              />
            </el-form-item>
            <el-form-item label="分发下载地址">
              <el-input
                v-model="form.url"
                type="textarea"
                placeholder="请输入分发下载地址"
                :autosize="{ minRows: 2, maxRows: 4}"
              />
            </el-form-item>
            <el-form-item label="apk下载地址">
              <el-input
                v-model="form.apkUrl"
                placeholder="请输入apk下载地址"
                type="textarea"
                :autosize="{ minRows: 2, maxRows: 4}"
              />
            </el-form-item>
            <el-form-item>
              <div slot="label" style="font-size: 24px;">
                <el-button v-if="!isUpload" :disabled="isUpload" size="mini" type="primary" icon="el-icon-upload" style="position: relative; top: -3px" @click="fakeClick('apkUrl')">上传</el-button>
                <i v-if="isUpload&&uploadStatus === 'start'" class="el-icon-video-pause" @click="subscription.unsubscribe(); uploadStatus = 'pause'" />
                <i v-if="isUpload&&uploadStatus === 'pause'" class="el-icon-video-play" @click="subscription = observable.observable.subscribe(observable.observer);uploadStatus = 'start'" />
                <i v-if="isUpload" class="el-icon-close" style="color: #F56C6C; margin-left: 6px" @click.stop="initUpload" />
              </div>
              <div>
                <div class="nprogress">
                  <span class="antzone">{{ percent }}%</span>
                  <div :style="`width: ${percent}%`" class="nprogress-inner" />
                </div>
              </div>
            </el-form-item>
          </el-col>
        </el-row>
      </el-form>
      <input type="file" style="visibility: hidden" class="apkUrl" @change="val => uploadFile(val, ['form','apkUrl'])">
      <div slot="footer" class="dialog-footer">
        <el-button
          size="small"
          @click="dialogVisible.version = false"
        >取 消</el-button>
        <el-button
          type="primary"
          :loading="isUpload"
          size="small"
          @click="updateSubmit('form')"
        >提交</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import * as qiniu from 'qiniu-js'
import { initForm, copyObject, clearEmptyItem } from '@/utils/index'
import { douyinAppList, versionAdd, deleteBatch, getToken } from '@/api/version'
import Pagination from '@/components/Pagination'
export default {
  components: {
    Pagination
  },

  data() {
    return {
      mode: '', // 新增的
      token: '', // 七牛云token， 用于上传下载软件
      percent: 0,
      isUpload: false,
      uploadStatus: 'start',
      observable: {
        observable() {},
        observer: {}
      },
      subscription: {
        unsubscribe() {}
      },
      tableData: {
        array: [],
        row: {},
        loading: false
      },
      pager: {
        pageNo: 1,
        pageSize: 10,
        total: 0
      },
      form: {
        mes: '',
        version: '',
        name: '',
        type: '',
        apkUrl: '',
        url: ''
      },
      dialogVisible: {
        version: false
      },
      map: {
        type: {
          ios: 'ios',
          android: 'android'
        },
        code: {
          1: '是',
          0: '否'
        }
      },
      rules: {
        type: [
          { required: true, message: '请选择软件版本', trigger: 'blur' }

        ]
      }
    }
  },
  created() {
    this.fetchData()
  },
  methods: {
    //  查询
    fetchData() {
      this.tableData.loading = true
      const _form = Object.assign({
        pageNo: this.pager.pageNo,
        pageSize: this.pager.pageSize
      })
      douyinAppList(_form)
        .then((res) => {
          const { result = {}} = res
          // if (Array.isArray(result.records)) {
          //   result.records.forEach(item => {
          //     if (item.url) {
          //       item.srcList = item.url.split(',')
          //     }
          //   })
          // }
          this.tableData.array = result.records
          this.pager.total = result.total // 总数
        })
        .finally((_) => {
          this.tableData.loading = false
        })
    },

    //    新增
    showDialog(mode, item) {
      this.mode = mode
      this.tableData.row = item || {}
      this.form = initForm(this.form)
      if (mode === 'edit') {
        this.form = copyObject(this.form, item, {
          numberToString: true
        })
      }
      this.dialogVisible.version = true
    },
    // 提交
    updateSubmit(form) {
      this.$refs[form].validate((valid) => {
        if (valid) {
          this.tableData.loading = true
          let _form = Object.assign({ id: this.tableData.row.id }, this.form)
          if (_form.url === '' || null) {
            _form.url = _form.apkUrl
          }
          if (_form.apkUrl === '' || null) {
            _form.apkUrl = _form.url
          }
          _form = clearEmptyItem(_form)
          versionAdd(_form, this.mode)
            .then((res) => {
              // debugger
              this.$message.success(res.message)
              this.dialogVisible.version = false
              this.fetchData()
            }).finally((_) => {
              this.tableData.loading = false
            })
        } else {
          console.log('error submit!!')
          return false
        }
      })
    },
    initUpload() {
      this.subscription.unsubscribe()
      this.percent = 0
      this.subscription = {
        unsubscribe() {}
      }
      this.observable = { observable() {}, observer: {}}
      this.$nextTick(_ => {
        this.isUpload = false
      })
    },
    isApkOrIpa(file) {
      return new Promise((resolve, reject) => {
        if (!file) return
        const reader = new FileReader()
        reader.readAsArrayBuffer(file)
        reader.onload = (e) => {
          const { result } = e.target
          const view = new DataView(result)
          const first4Byte = view.getUint32(0, false).toString(16).toUpperCase()
          // console.log(first4Byte)
          switch (first4Byte) {
            case '504B0304': {
              resolve('apk')
              break
            }
            case '123': {
              resolve('ipa')
              break
            }
            default: {
              this.$message.info('请上传apk或ipa文件')
              reject("file type is not 'apk' or 'ipa', please check the file's type")
              break
            }
          }
        }
      })
    },
    async uploadFile(e, target) {
      const files = e.target.files
      let file = files[0]
      const type = await this.isApkOrIpa(file)

      switch (type) {
        case 'apk': {
          file = new File([file], 'tianse.apk', { type: file.type })
          break
        }
        case 'ipa': {
          file = new File([file], 'tianse.ipa', { type: file.type })
          break
        }
      }

      if (files.length) {
        this.isUpload = true
        const { result: token, rows: _url } = await getToken({ name: file.name })
        const observable = qiniu.upload(file, file.name, token)
        // const _url = 'https://upload-z2.qiniup.com/'
        const observer = {
          next: (res) => {
            const { total } = res
            this.percent = Number(total.percent.toFixed(1))
          },
          error: (err) => {
            this.$message.error(`上传失败：${err.message}`)
          },
          complete: (res) => {
            this.$message.success('上传完成')
            this.isUpload = false
            this.form.apkUrl = (_url || '') + res.key
          }
        }

        this.percent = 0
        this.form.apkUrl = ''
        this.subscription = observable.subscribe(observer)
        this.observable = {
          observable,
          observer
        }
      }
    },
    fakeClick(className) {
      const filesInput = document.querySelector(`input[type=file].${className}`)
      filesInput.click()
    },

    // 分页
    handlePagerChange(val) {
      this.pager.pageNo = val.index
      this.pager.pageSize = val.size
      this.fetchData()
    },
    // 删除
    handleDelete(index, row) {
      const _form = Object.assign({ id: row.id })
      deleteBatch(_form)
        .then((data) => {
          this.$message.success(data.message)
          this.fetchData()
        })
        .catch((error) => {
          console.log(error)
        })
    }
  }
}
</script>

<style scoped  lang="scss">
.header {
  width: 100%;
  height: 60px;
  line-height: 60px;
  display: flex;
}
.header .header-left {
  flex: 1;
  font-weight: 500;
  font-size: 20px;
}
.header .header-right {
  width: 100px;
}
/* 新增图标 */
.icon-container {
  width: 25px;
  height: 25px;
  border-radius: 4px;
  border: 1px dashed #ccc;
  position: relative;
  left: 215px;
  cursor: pointer;
  i {
    display: block;
    font-size: 14px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 999;

  }
}
.nprogress{
  border-radius: 16px;
  height: 29px;
  line-height: 29px;
  border: 1px solid #999;
  text-align: center;
  position: relative;
  overflow: hidden;
  // margin-top: 3px;
}

.nprogress-inner{
  position: absolute;
  left: 0;
  top: 0;
  width: 0;
  height: 100%;
  background-image: linear-gradient(45deg, #4568DC, #B06AB3);
  transition: .2s;
  color: #fff;
}
.antzone{
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: 2;
  color: #ccc;
}
</style>
