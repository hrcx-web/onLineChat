<template>
  <div style="width: 100%; height: 100%; overflow: hidden">
    <div class="login-container">
      <div class="arrow-left" />
      <div class="arrow-right" />
    </div>
    <div class="main-part">
      <div class="main-part_left">
        <div class="test" />
        <div>
          <div
            class="login-type"
            :class="loginForm.loginType === 'admin' ? 'type-active' : ''"
            @click="changeLoginMode('admin')"
          >
            <div class="login-type-container">
              <div class="login-type-icon">
                <svg-icon icon-class="admin" />
              </div>
              <div class="login-type-text">
                <div class="">管理员</div>
                <div class="font-fantasy">Admin</div>
              </div>
            </div>
          </div>
          <div
            class="login-type"
            :class="loginForm.loginType === 'distributor' ? 'type-active' : ''"
            @click="changeLoginMode('distributor')"
          >
            <div class="login-type-container">
              <div class="login-type-icon">
                <svg-icon icon-class="distributorIcon" />
              </div>
              <div class="login-type-text">
                <div class="">渠道商</div>
                <div class="font-fantasy">Distributor</div>
              </div>
            </div>
          </div>
          <div
            class="login-type"
            :class="loginForm.loginType === 'union' ? 'type-active' : ''"
            @click="changeLoginMode('union')"
          >
            <div class="login-type-container">
              <div class="login-type-icon">
                <svg-icon icon-class="union" />
              </div>
              <div class="login-type-text">
                <div class="">工会</div>
                <div class="font-fantasy">Union</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="main-part_right">
        <el-form
          ref="loginForm"
          :model="loginForm"
          :rules="loginRules"
          class="login-form"
          auto-complete="on"
          label-position="left"
        >
          <div class="title-container">
            <h3 class="title">登 录 界 面</h3>
          </div>

          <el-form-item prop="username">
            <span class="svg-container">
              <svg-icon icon-class="user" />
            </span>
            <el-input
              ref="username"
              v-model="loginForm.username"
              placeholder="账号"
              name="username"
              type="text"
              tabindex="1"
              auto-complete="on"
            />
          </el-form-item>

          <el-form-item prop="password">
            <span class="svg-container">
              <svg-icon icon-class="password" />
            </span>
            <el-input
              :key="passwordType"
              ref="password"
              v-model="loginForm.password"
              :type="passwordType"
              placeholder="密码"
              name="password"
              tabindex="2"
              auto-complete="on"
              @keyup.enter.native="handleLogin"
            />
            <span class="show-pwd" @click="showPwd">
              <svg-icon :icon-class="passwordType === 'password' ? 'eye' : 'eye-open'" />
            </span>
          </el-form-item>
          <!-- <el-button
            :loading="loading"
            type=""
            style="width:100%;margin-bottom:30px;"
            @click.native.prevent="handleLogin"
          >登 录</el-button> -->

          <button class="login-button" @click.prevent="handleLogin">
            <div style="margin-right: 10px">登录</div>
            <i class="wave" />
          </button>
        </el-form>
      </div>
    </div>
  </div>
</template>

<script>
import { JSEncrypt } from 'jsencrypt'
import { PublicKey } from '@/api/user'
// import { login } from '@/api/user'
// import { auth } from "@/api/user";
// import { setToken } from "@/utils/auth";

export default {
  name: 'Login',
  data() {
    return {
      token: '',
      str: '',
      // numberValidateForm: {
      //   phone: "15392021093",
      //   code: "000000",
      // },
      loginForm: {
        username: '',
        password: '',
        loginType: 'admin'
      },
      loginRules: {
        username: [
          { required: true, trigger: 'blur', message: '请输入账号' }
        ],
        password: [
          { required: true, trigger: 'blur', message: '请输入密码' }
        ]
      },
      loading: false,
      passwordType: 'password',
      redirect: undefined
    }
  },
  watch: {
    $route: {
      handler: function(route) {
        this.redirect = route.query && route.query.redirect
      },
      immediate: true
    }
  },
  created() {
    // this.getAuthCode();
    this.setToken()
  },
  methods: {
    setToken(token) {
      this.token
    },
    changeLoginMode(type) {
      this.loginForm.loginType = type
    },
    showPwd() {
      if (this.passwordType === 'password') {
        this.passwordType = ''
      } else {
        this.passwordType = 'password'
      }
      this.$nextTick(() => {
        this.$refs.password.focus()
      })
    },
    addAnimation() {
      const loginButton = document.querySelector('.wave')
      loginButton.className += ' wave-animation'
    },
    removeAnimation() {
      const loginButton = document.querySelector('.wave')
      loginButton.className = loginButton.className.replace(' wave-animation', '')
    },
    handleLogin() {
      this.$refs.loginForm.validate(async(valid) => {
        if (valid) {
          const { publicKey } = await PublicKey({})
          var crypt = new JSEncrypt()
          this.addAnimation()
          crypt.setPublicKey(publicKey)
          // 拿到加密明文
          const _form = Object.assign({}, this.loginForm)
          const passWord = crypt.encrypt(_form.password)
          _form.password = passWord
          this.$store
            .dispatch('user/login', _form)
            .then(() => {
              // this.getAuthCode();
              this.$router.push({ path: '/' })
              this.removeAnimation()
            })
            .catch(() => {
              this.removeAnimation()
            })
        } else {
          console.log('error submit!!')
          return false
        }
      })
    }
  }
}
</script>

<style lang="scss">
/* 修复input 背景不协调 和光标变色 */
/* Detail see https://github.com/PanJiaChen/vue-element-admin/pull/927 */

$bg: #283443;
$light_gray: #fff;
$cursor: #fff;

@supports (-webkit-mask: none) and (not (cater-color: $cursor)) {
  .main-part .el-input input {
    color: $cursor;
  }
}

.font-fantasy{
  font-family: fantasy;
}

/* reset element-ui css */
.main-part {
  .el-select {
    width: calc(100% - 30px);
    .el-input {
      width: 100% !important;
    }
  }
  .el-input {
    display: inline-block;
    height: 47px;
    width: 85%;

    input {
      background: transparent;
      border: 0px;
      -webkit-appearance: none;
      border-radius: 0px;
      padding: 12px 5px 12px 15px;
      color: #000;
      height: 47px;
      caret-color: $cursor;

      &:-webkit-autofill {
        box-shadow: 0 0 0px 1000px #fff inset !important;
        // -webkit-text-fill-color: $cursor !important;
        // background-color: transparent !important;
      }
    }
  }

  .el-form-item {
    border: 1px solid rgba(255, 255, 255, 0.8);
    // background: rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    color: #454545;
  }
  .el-form-item__content{
    // border-radius: 4px;
    border-bottom: 1px solid #ccc;
  }
}
</style>

<style lang="scss" scoped>
$bg: #2d3a4b;
$dark_gray: #889aa4;
$light_gray: #eee;

.arrow-left{
  border-top: 300px solid rgba(255, 255, 255, 0.1);
  border-right: 100px solid transparent;
  width: 0;
  height: 0;
  animation: arrowLeft infinite 8s cubic-bezier(.5,0,.5,1);
}
.arrow-right{
  border-bottom: 300px solid rgba(255, 255, 255, 0.1);
  border-left: 100px solid transparent;
  width: 0;
  height: 0;
  animation: arrowRight infinite 8s cubic-bezier(.5,0,.5,1);
  position: absolute;
  bottom: 0;
  right: 0;
}

@keyframes arrowRight {
  0%{
    border-bottom: 300px solid rgba(255, 255, 255, 0.1);
    border-left: 100px solid transparent;
  }
  50%{
    border-bottom: 4500px solid rgba(255, 255, 255, 0.1);
    border-left: 1500px solid transparent;
  }
  100%{
    border-bottom: 300px solid rgba(255, 255, 255, 0.1);
    border-left: 100px solid transparent;
  }
}

@keyframes arrowLeft {
  0%{
    border-top: 300px solid rgba(255, 255, 255, 0.1);
    border-right: 100px solid transparent;
  }
  50%{
    border-top: 4500px solid rgba(255, 255, 255, 0.1);
    border-right: 1500px solid transparent;
  }
  100%{
    border-top: 300px solid rgba(255, 255, 255, 0.1);
    border-right: 100px solid transparent;
  }
}

.main-part {
  max-width: 100%;
  width: 700px;
  height: 400px;
  background: #fff;
  border-radius: 8px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  align-items: center;
  overflow: hidden;

  .main-part_left {
    padding: 40px;
    // background: linear-gradient(to left, rgb(96, 108, 136), rgb(63, 76, 107));
    background: url("../../assets/timg.jpg") no-repeat;
    background-size: cover;
    background-position: center;
    height: 100%;
    position: relative;

    .test{
      background: linear-gradient(to top, rgb(69, 127, 202), rgb(86, 145, 200));
      opacity: .4;
      width: 100%;
      height: 100%;
      position: absolute;
      left: 0;
      top: 0;
    }
  }

  .main-part_right {
    padding: 30px;
    // background: linear-gradient(to right, $bg, #fff);
    flex: 1;
    height:100%;
  }
}

.login-type-container {
  display: flex;
  align-items: center;
}

.login-type-icon {
  font-size: 40px;
}
.login-type-text {
  padding: 0 12px;
  line-height: 1;
}
.login-type {
  border-radius: 6px;
  width: 160px;
  height: 80px;
  line-height: 80px;
  padding: 0 15px;
  color: #eee;
  margin-bottom: 25px;
  box-shadow: -3px -3px 6px 0 rgba(255, 255, 255, 0.6), 4px 4px 8px 0 rgba(0, 0, 0, 0.8),
    4px 4px 8px 0 transparent inset, -1px -1px 2px transparent inset;
  transition: 0.4s;
  cursor: pointer;
  position: relative;
  z-index: 2;
}
.type-active {
  box-shadow: -4px -4px 8px 0 transparent, 4px 4px 8px 0 transparent,
    4px 4px 8px 0 rgba(0, 0, 0, 0.6) inset, -1px -1px 2px #eee inset;
  color: #fff;
}
.login-type:hover {
  box-shadow: -4px -4px 8px 0 transparent, 4px 4px 8px 0 transparent,
    4px 4px 8px 0 rgba(0, 0, 0, 0.6) inset, -1px -1px 2px #eee inset;
}

.svg-container {
  padding: 6px 5px 6px 15px;
  color: #000;
  vertical-align: middle;
  width: 30px;
  display: inline-block;
}

.login-form {
  // position: relative;
  // width: 520px;
  max-width: 100%;
  margin: 0 auto;
  // overflow: hidden;
}

.tips {
  font-size: 14px;
  color: #fff;
  margin-bottom: 10px;

  span {
    &:first-of-type {
      margin-right: 16px;
    }
  }
}

.title-container {
  position: relative;
  margin: 0px auto 40px auto;

  .title {
    font-size: 26px;
    color: #000;
    text-align: center;
    font-weight: bold;
    &::before{
      content: "";
      display: block;
      position: absolute;
      width: 20px;
      height: 20px;
      border: 2px solid;
      transition: all 0.6s ease;
      border-radius: 2px;

      top: 0;
      left: 0;
      border-bottom-color: transparent;
      border-right-color: transparent;
      border-top-color: #566473;
      border-left-color: #566473;
    }
    &::after{
      content: "";
      display: block;
      position: absolute;
      width: 20px;
      height: 20px;
      border: 2px solid;
      transition: all 0.6s ease;
      border-radius: 2px;

      bottom: 0;
      right: 0;
      border-top-color: transparent;
      border-left-color: transparent;
      border-bottom-color: #566473;
      border-right-color: #566473;
    }
  }
}

.show-pwd {
  position: absolute;
  right: 10px;
  top: 7px;
  font-size: 16px;
  color: $dark_gray;
  cursor: pointer;
  user-select: none;
}

.login-container {
  min-height: 100%;
  width: 100%;
  background: linear-gradient(40deg, rgb(43, 88, 118), rgb(78, 67, 118));
  // background: url("../../assets/58a1558244c54.jpg") no-repeat;
  // background-size: cover;
  // background-position: center;
  // filter: blur(3px);
  overflow: hidden;
  background-size: 200%;
  animation: backwave 5s infinite;

}

@keyframes backwave {
  0%{
    background-position: 0 0;
  }
  50%{
    background-position: 50% 50%;
  }
  100%{
    background-position: 0 0;
  }
}

.login-button{
  padding: 15px 30px;
  position: absolute;
  right: 30px;
  background: #3f4c6b;
  color: #fff;
  border-radius: 4px;
  border: none;
  outline: none;
  display: flex;
  align-items: center;
  cursor: pointer;
}

.wave{
  display: inline-block;
  width: 16px;
  height: 16px;
  transition: .2s;
  border-radius: 50%;
  box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1), 0 0 0 20px rgba(255, 255, 255, 0.1), 0 0 0 40px rgba(255, 255, 255, 0.1), 0 0 0 60px rgba(255, 255, 255, 0.1);
}
.wave-animation{
  animation: ripple 0.6s linear infinite;

}

@keyframes ripple {
  0% {
    box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1), 0 0 0 20px rgba(255, 255, 255, 0.1), 0 0 0 40px rgba(255, 255, 255, 0.1), 0 0 0 60px rgba(255, 255, 255, 0.1);
  }
  100% {
    box-shadow: 0 0 0 20px rgba(255, 255, 255, 0.1), 0 0 0 40px rgba(255, 255, 255, 0.1), 0 0 0 60px rgba(255, 255, 255, 0.1), 0 0 0 80px rgba(255, 255, 255, 0);
  }
}
</style>
