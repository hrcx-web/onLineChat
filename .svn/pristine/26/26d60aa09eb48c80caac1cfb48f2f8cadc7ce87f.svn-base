<template>
  <div class="app-container">
    <div class="header">
      <div class="header-left">
        标签
      </div>
      <div class="header-right">
        <el-button type="danger" size="small" :disabled="sels.length === 0" @click="deleteFileOrDirectory(sels)">批量删除</el-button>
        <el-button type="primary" plain size="small" @click="showDialog('add')">新增</el-button>
      </div>
    </div>
    <el-table
      v-loading="tableData.loading"
      :data="tableData.array"
      border
      fit
      highlight-current-row
      @selection-change="selsChange"
    >
      <el-table-column type="selection" align="center" />
      <el-table-column align="center" label="标签内容">
        <template slot-scope="scope">{{ scope.row.value }}</template>
      </el-table-column>
      <el-table-column align="center" label="类型">
        <template slot-scope="scope">{{ piles[scope.row. type] }}</template>
      </el-table-column>
      <el-table-column align="center" label="创建时间">
        <template slot-scope="scope">{{ (scope.row. time ||'').slice(0,10) }}</template>
      </el-table-column>
      <el-table-column align="center" label="描述">
        <template slot-scope="scope">{{ scope.row. remark }}</template>
      </el-table-column>

      <el-table-column label="操作" width="165px" align="center">
        <template slot-scope="scope">
          <el-row :gutter="10">
            <el-col :span="10">
              <el-button size="mini" @click="handleClick(scope.row)">查看</el-button>
            </el-col>
            <el-col :span="10" size="mini" tyle="margin-top: 5px">
              <el-button size="mini" @click="showDialog('edit' ,scope.row)">编辑</el-button>
            </el-col>
          </el-row>
        </template>
      </el-table-column>
    </el-table>
    <pagination
      :pager-index="pager.pageNo"
      :pager-size="pager.pageSize"
      :pager-total="pager.total"
      @pagination-change="handlePagerChange"
    />
    <el-dialog :visible.sync="dialogVisible.flag" width="500px" :title="`${mode === 'add' ? '新增' : '编辑'}标签信息`" center style="z-index: 9999">
      <el-form label-position="right" label-width="100px" :model="form" size="mini">
        <el-row :gutter="10">
          <el-col :span="22">
            <el-form-item label="描述">
              <el-input v-model="form.remark" />
            </el-form-item>
            <el-form-item label="类型">
              <el-select v-model="form.type" placeholder="请选择">
                <el-option v-for="(value, key) in piles" :key="key" :value="key" :label="value" />
              </el-select>
            </el-form-item>
            <el-form-item label="标签内容">
              <el-input v-model="form.value" />
            </el-form-item>
          </el-col>
        </el-row>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button
          size="small"
          @click="dialogVisible.flag=false"
        >取 消</el-button>
        <el-button type="primary" size="small" @click="updateSubmit">提交</el-button>
      </div>
    </el-dialog>
    <el-dialog
      title="标签信息"
      center
      :visible.sync="checkVisible"
      width="500px"
    >
      <div class="box">
        <div class="one">
          <span>标签内容:</span>
          <el-input v-model="handleRow.value" :disabled="true" size="mini" />
        </div>
        <div class="one">
          <span>描述:</span>
          <el-input v-model="handleRow.remark" :disabled="true" size="mini" />
        </div>
        <div class="one">
          <span>类型:</span>
          <el-input v-model="piles[handleRow.type]" :disabled="true" size="mini" />
        </div>
      </div>

    </el-dialog>
  </div>
</template>

<script>
import { labelList, updatelable, deleteBatch } from '@/api/label'
import { initForm, copyObject, clearEmptyItem } from '@/utils/index'
import Pagination from '@/components/Pagination'
export default {
  components: {
    Pagination
  },
  data() {
    return {
      mode: '',
      tableData: {
        array: [],
        row: {},
        loading: false
      },
      pager: {
        pageNo: 1,
        pageSize: 10,
        total: 0
      },
      form: {
        remark: '',
        type: '',
        value: ''
      },
      sels: [], // 多选框
      dialogVisible: {
        flag: false
      },
      checkVisible: false,
      handleRow: [],
      piles: {
        1: '男',
        2: '女'
      }
    }
  },
  created() {
    this.featchData()
  },
  methods: {
    featchData() {
      this.tableData.loading = true
      const _form = Object.assign({
        pageNo: this.pager.pageNo, // 页数
        pageSize: this.pager.pageSize // 条数
      }, this.filter)
      labelList(_form)
        .then((res) => {
          const { result = {}} = res
          this.tableData.array = result.records
          this.pager.total = result.total // 总数
        }).finally(_ => {
          this.tableData.loading = false
        })
    },
    // 新增
    showDialog(mode, item) {
      this.mode = mode
      this.tableData.row = item || {}
      this.form = initForm(this.form)
      if (mode === 'edit') {
        this.form = copyObject(this.form, item, {
          numberToString: true })
      }
      this.dialogVisible.flag = true
    },
    updateSubmit() {
      let _form = Object.assign({ id: this.tableData.row.id }, this.form)
      _form = clearEmptyItem(_form)
      updatelable(_form, this.mode).then(res => {
        this.$message.success(res.message)
        this.dialogVisible.flag = false
        this.featchData()
      })
    },
    handlePagerChange(val) {
      this.pager.pageNo = val.index
      this.pager.pageSize = val.size
      this.featchData()
    },
    selsChange(sels) {
      this.sels = sels
    },
    deleteFileOrDirectory() {
      const ids = this.sels.map((list) => list.id).join()
      this.$confirm('确定要删除选中的文件吗?', '提示').then(() => {
        deleteBatch({
          ids: ids
        }).then(data => {
          this.$message.success(data.message)
          this.featchData()
        })
      }).catch(error => {
        console.log(error)
      })
    },
    handleClick(row) {
      this.checkVisible = true
      this.handleRow = row
    }
  }
}

</script>
<style scoped>
.header{
    width: 100%;
    height: 60px;
    line-height: 60px;
    display: flex;
}
 .header  .header-left{
    flex: 1;
    font-weight: 500;
    font-size:20px ;
}
.header  .header-right{
    width: 200px;
}

.one {
  display: flex;

}
.one span {
  width: 100px;
  text-align: left;
  height: 40px;
  line-height: 40px;
}
.el-input {
  background: content-box;
}
</style>
