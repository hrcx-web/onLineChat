<template>
  <div class="app-container">
    <div class="header">
      <el-form inline size="mini">
        <el-form-item>
          <el-select v-model="filter.operatorStatus" clearable placeholder="请选择处理状态">
            <el-option v-for="(value, key) in map.operatorStatus" :key="key" :value="key" :label="value" />
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-select v-model="filter.readStatus" clearable placeholder="请选择阅读状态">
            <el-option v-for="(value, key) in map.readStatus" :key="key" :value="key" :label="value" />
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-select v-model="filter.customerId" clearable placeholder="请选择处理客服">
            <el-option v-for="(value, key) in map.customerId" :key="key" :value="key" :label="value" />
          </el-select>
        </el-form-item>
        <el-button type="primary" size="mini" icon="el-icon-search" @click="fetchData" />
      </el-form>
    </div>
    <div class="top">
      <div class="top-left">通知列表</div>
      <div class="top-right">
        <el-button size="small" :disabled="multipleTable.length === 0" type="danger" @click="deleteBatch()">批量删除</el-button>
        <!-- <el-button size="small" type="primary" @click="showDialog('add')">新增</el-button> -->
      </div>
    </div>
    <el-table
      v-loading="tableData.loading"
      :data="tableData.array"
      border
      fit
      highlight-current-row
      @selection-change="selsChange"
    >
      <el-table-column
        align="center"
        type="selection"
      />
      <el-table-column
        align="center"
        prop="userIm"
        label="发起人环信号"
      />
      <el-table-column
        align="center"
        prop="message"
        label="消息"
        :show-overflow-tooltip="true"
      />
      <el-table-column
        align="center"
        prop="toUserIm"
        label="接收者环信号"
      />
      <el-table-column
        align="center"
        prop="createTime"
        label="消息接收时间"
      />
      <el-table-column
        align="center"
        label="处理客服"
      >
        <template slot-scope="scope">
          {{ map.customerId[scope.row.customerId] }}
        </template>
      </el-table-column>
      <el-table-column
        align="center"
        label="处理状态"
      >
        <template slot-scope="scope">
          <div class="status-style" :class="scope.row.operatorStatus == 1 ? 'in-status' : ''">
            {{ map.operatorStatus[scope.row.operatorStatus] }}
            <i class="chat chat-chuli" style="margin: 0 6px; cursor:pointer" @click="updateSubmit(scope.row, 'operatorStatus')" />
          </div>
        </template>
      </el-table-column>
      <el-table-column
        align="center"
        label="阅读状态"
      >
        <template slot-scope="scope">
          <div class="status-style" :class="scope.row.readStatus == 1 ? 'in-status' : ''">
            {{ map.readStatus[scope.row.readStatus] }}
            <i class="chat chat-yuedu" style="margin: 0 6px; cursor:pointer" @click="updateSubmit(scope.row, 'readStatus')" />
          </div>
        </template>
      </el-table-column>
      <el-table-column
        align="center"
        prop="updateTime"
        label="阅读时间"
      />
    </el-table>
    <pagination
      :pager-size="pager.pageSize"
      :pager-index="pager.pageNo"
      :pager-total="pager.total"
      @pagination-change="handlePagerChange"
    />

  </div>
</template>

<script>
import Pagination from '@/components/Pagination'
import { mutualEdit, queryMutual, deleteMutual, usergetMap } from '@/api/user'
import { initForm, copyObject } from '@/utils/index'
export default {
  components: {
    Pagination
  },
  data() {
    return {
      mode: '',
      dialogVisible: {
        info: false
      },
      multipleTable: [],
      filter: {
        operatorStatus: '',
        readStatus: '',
        customerId: ''
      },
      map: {
        operatorStatus: {
          1: '已处理',
          0: '未处理'
        },
        readStatus: {
          1: '已阅读',
          0: '未阅读'
        },
        customerId: {}
      },
      tableData: {
        array: [],
        row: {},
        loading: false
      },
      form: {
        // platformName: '',
        distributeType: '',
        price: '',
        // resetValue: '',
        settleType: '',
        sysUserId: ''
        // threshold: '',
        // url: ''
      },
      formLoading: false,
      pager: {
        pageNo: 1,
        pageSize: 10,
        total: 0
      }
    }
  },
  created() {
    this.usergetMap()
    this.fetchData()
  },
  methods: {
    usergetMap() {
      usergetMap()
        .then(res => {
          if (Array.isArray(res.result)) {
            res.result.forEach(item => {
              const _keys = Object.keys(item)
              _keys.forEach(key => {
                this.map.customerId[key] = item[key]
              })
            })
          }
        })
    },
    selsChange(sels) {
      this.multipleTable = sels
    },
    handlePagerChange(val) {
      this.pager.pageNo = val.index
      this.pager.pageSize = val.size
      this.fetchData()
    },

    showDialog(mode, item) {
      this.mode = mode
      this.tableData.row = item || {}
      this.form = initForm(this.form)
      if (mode === 'edit') {
        this.form = copyObject(this.form, item, { numberToString: true })
      }
      this.dialogVisible.info = true
    },

    updateSubmit(item, type) {
      this.formLoading = true
      const status = item[type] === 1 ? 0 : 1
      mutualEdit({
        id: item.id,
        [type]: item[type] === 1 ? 0 : 1
      }, this.mode).then(res => {
        // this.$message.success(res.message)
        if (type === 'readStatus') {
          this.fetchData()
        } else {
          item[type] = status
        }
      }).finally(_ => {
        this.formLoading = false
      })
    },
    fetchData() {
      this.tableData.loading = true
      const _form = Object.assign({
        pageNo: this.pager.pageNo, // 页数
        pageSize: this.pager.pageSize // 条数
      }, this.filter)
      queryMutual(_form)
        .then((res) => {
          const { result = {}} = res
          this.tableData.array = result.records
          this.pager.total = result.total // 总数
        }).finally(_ => {
          this.tableData.loading = false
        })
    },
    deleteBatch() {
      const ids = this.multipleTable.map((row) => row.id).join(',')
      console.log(ids)
      this.$confirm('确定要删除选中的通知信息吗?', '提示')
        .then(() => {
          deleteMutual({
            ids: ids
          }).then((data) => {
            this.$message.success(data.message)
            this.fetchData()
          })
        })
    }
  }
}
</script>

<style lang="scss">
@import '@/styles/variables.scss';
.in-status{
    color: $menuBg;
}
.status-style{
    transition: .2s;
}
</style>
