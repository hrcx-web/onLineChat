<template>
  <div :class="{'has-logo':showLogo}">
    <logo v-if="showLogo" :collapse="isCollapse" />
    <el-scrollbar wrap-class="scrollbar-wrapper" class="scrollbar-box">
      <el-menu
        :default-active="activeMenu"
        :collapse="isCollapse"
        :background-color="variables.menuBg"
        :text-color="variables.menuText"
        :unique-opened="true"
        :active-text-color="variables.menuActiveText"
        :collapse-transition="false"
        mode="vertical"
        @open="moveLine"
        @close="moveLine"
      >
        <sidebar-item v-for="(route, index) in routes" :key="index" :item="route" :base-path="route.path" />
      </el-menu>
      <div class="white-line" />
    </el-scrollbar>
  </div>
</template>

<script>
import { mapGetters } from 'vuex'
import Logo from './Logo'
import SidebarItem from './SidebarItem'
import variables from '@/styles/variables.scss'

export default {
  components: { SidebarItem, Logo },
  computed: {
    ...mapGetters([
      'sidebar'
    ]),
    routes() {
      return this.$router.options.routes
    },
    activeMenu() {
      const route = this.$route
      const { meta, path } = route
      // if set path, the sidebar will highlight the path you set
      if (meta.activeMenu) {
        return meta.activeMenu
      }
      return path
    },
    showLogo() {
      return this.$store.state.settings.sidebarLogo
    },
    variables() {
      return variables
    },
    isCollapse() {
      return !this.sidebar.opened
    }
  },
  created() {
    this.moveLine()
  },
  mounted() {
    document.querySelector('.scrollbar-box .el-scrollbar__wrap').addEventListener('scroll', () => {
      this.moveLine()
    })
  },
  methods: {
    moveLine() {
      this.$nextTick(_ => {
        const whiteLine = document.querySelector('.white-line')
        setTimeout(() => {
          const activeItem = document.querySelector('.is-active .el-submenu__title') || document.querySelector('.el-menu-item.is-active')
          const activeItemHeight = activeItem.getBoundingClientRect().y - 10
          whiteLine.style.transform = `translateY(${activeItemHeight}px)`
        }, 300)
      })
    }
  }
}
</script>
