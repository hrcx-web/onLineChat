<template>
  <div class="app-container">
    <div class="header">
      <div class="header-left">
        公共配置
      </div>
      <div class="header-right">
        <el-button :disabled="sels.length === 0" @click="deleteFileOrDirectory(sels)">批量删除</el-button>
        <el-button type="success" plain @click="afficheAdd">添加</el-button>
      </div>
    </div>
    <el-table
      v-loading="listLoading"
      :data="list"
      element-loading-text="Loading"
      border
      fit
      highlight-current-row
      @selection-change="selsChange"
    >
      <!-- 复选框 -->
      <el-table-column type="selection" width="55" />
      <el-table-column align="center" label="公告图片" width="150">
        <template slot-scope="scope"> <el-image
          style="width: 100px; height: 100px"
          class="headJig"
          :src="scope.row.images"
          @click="changeImg(scope.row)"
        /></template>
      </el-table-column>
      <el-table-column align="center" label="公告内容" width="200">
        <template slot-scope="scope">{{ scope.row.content }}</template>
      </el-table-column>
      <el-table-column align="center" label="时间" width="95">
        <template slot-scope="scope">{{ scope.row.time }}</template>
      </el-table-column>
      <el-table-column align="center" label="备注" width="200">
        <template slot-scope="scope">{{ scope.row.remark }}</template>
      </el-table-column>
      <el-table-column align="center" label="是否提醒" width="95">
        <template slot-scope="scope">{{ piles[scope.row.type] }}</template>
      </el-table-column>
      <el-table-column align="center" label="操作" width="200">
        <template slot-scope="scope">
          <el-button type="info" plain size="mini" @click="handleClick(scope.row)">查看</el-button>
          <el-button size="mini" @click="handleEdit(scope.row)">编辑</el-button>
          <el-button type="primary" @click="addIphone(scope.row.id)">添加相册集</el-button>
        </template>
      </el-table-column>
    </el-table>
    <el-pagination
      :current-page="pageNo"
      :page-sizes="[10, 20, 30, 40]"
      :page-size="pageSize"
      layout="total, sizes, prev, pager, next, jumper"
      :total="total"
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      @prev-click="pre"
      @next-click="nex"
    />
    <!-- 新增 -->
    <el-dialog
      title="提示"
      :visible.sync="dialogVisible"
      width="30%"
    >
      <el-form :label-position="labelPosition" label-width="100px" :model="from">
        <el-form-item label="公告内容">
          <el-input v-model="from.content" />
        </el-form-item>
        <el-form-item label="图片">
          <input type="file" @change="uploadFile" v-html="from.images">
          <el-image class="iconIMG" :src="Icon" />
        </el-form-item>
        <el-form-item label="是否提醒">
          <el-select v-model="from.type" placeholder="请选择">
            <el-option v-for="(value, key) in piles" :key="key" :value="key" :label="value" />
          </el-select>
        </el-form-item>
        <el-form-item label="备注">
          <el-input v-model="from.remark" />
        </el-form-item>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button @click="hideAdd">取 消</el-button>
        <el-button type="primary" @click="sureAdd">确 定</el-button>
      </span>
    </el-dialog>
    <!-- 编辑 -->
    <el-dialog

      :visible.sync="editVisible"
      width="30%"
    >
      <el-form :label-position="labelPosition" label-width="100px" :model="editRow">
        <el-form-item label="公告内容">
          <el-input v-model="editRow.content" />
        </el-form-item>
        <el-form-item label="图片">
          <el-input v-model="editRow.images" />
        </el-form-item>
        <el-form-item label="是否提醒">
          <el-select v-model="editRow.type" placeholder="请选择">
            <el-option v-for="(value, key) in piles" :key="key" :value="key" :label="value" />
          </el-select>
        </el-form-item>
        <el-form-item label="备注">
          <el-input v-model="editRow.remark" />
        </el-form-item>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button @click="hideEdit">取 消</el-button>
        <el-button type="primary" @click="sureEdit">确 定</el-button>
      </span>
    </el-dialog>
    <!-- 查看全部 -->
    <el-dialog
      title="公告信息"
      center
      :visible.sync="handleVisible"
      width="30%"
    >
      <div class="box">
        <div class="one">
          <span>时间:</span>
          <el-input v-model="handleRow.time" :disabled="true" />
        </div>
        <div class="one">
          <span>是否强制提醒:</span>
          <el-input v-model="handleRow.type" :disabled="true" />
        </div>
        <div class="one">
          <span>备注:</span>
          <el-input v-model="handleRow.remark" :disabled="true" />
        </div>
        <div class="one">
          <span>公告图片:</span>
          <el-input v-model="handleRow.images" :disabled="true" />
        </div>
        <div class="one">
          <span>公告内容:</span>
          <el-input v-model="handleRow.content" :disabled="true" />
        </div>
        <div class="one">
          <span>ID:</span>
          <el-input v-model="handleRow.id" :disabled="true" />
        </div>
        <div class="one">
          <span>图标:</span>
          <el-input v-model="handleRow.icon" :disabled="true" />
        </div>

      </div>

    </el-dialog>

  </div>
</template>

<script>
import { afficheAdd } from '@/api/affiche'
import { noticeList } from '@/api/affiche'
import { noticeEdit } from '@/api/affiche'
import { deleteBatch } from '@/api/affiche'
import { uploadQNImg } from '@/api/user'
export default {
  data() {
    return {
      list: null, // 查询的数据
      labelPosition: 'right',
      listLoading: true,
      pageNo: 1, // 默认一页
      pageSize: 10, // 默认10条
      total: 1, // 总数
      sels: [],
      dialogVisible: false,
      editVisible: false, // 编辑
      from: { // 用于新增
        content: '', // 公告内容
        images: '', // 图片
        remark: '', // 备注
        type: '', // 是否强制提醒
        id: ''
      },
      editRow: [], // 存储编辑
      piles: {
        1: '是',
        2: '否' },
      editImg: [], // 接受头像值
      handleVisible: false, // 查看的显示
      handleRow: [], // 存查看
      Icon: '' // 新增的图
    }
  },
  created() {
    this.fetchData()
  },
  methods: {
    //   查询
    fetchData() {
      this.listLoading = false
      noticeList({
        pageNo: this.pageNo, // 页数
        pageSize: this.pageSize// 条数
      }).then(data => {
        if (data.code === 200) {
          console.log(data)
          this.list = data.result.records
          this.total = data.result.total
        }
      }).catch(error => {
        console.log(error)
      })
    },
    // 复选框的操作
    selsChange(sels) {
      this.sels = sels
    },
    // 批量删除
    deleteFileOrDirectory() {
      const ids = this.sels.map((from) => from.id).join()
      //   console.log(typeof (ids))
      this.$confirm('确定要删除选中的文件吗?', '提示')
        .then(() => {
          deleteBatch({
            ids: ids
          }).then((data) => {
            if (data.code === 200) {
              this.fetchData()
              console.log(data.success)
            }
          })
        })
        .catch((error) => {
          console.log(error)
        })
    },
    // 点击添加
    afficheAdd() {
      this.dialogVisible = true
      this.from = {}
      this.Icon = ''
    },
    // 点击取消
    hideAdd() {
      this.dialogVisible = false
    },
    // 点击确定
    sureAdd() {
      this.dialogVisible = false
      afficheAdd({
        id: this.from.id,
        content: this.from.content,
        images: this.from.images,
        remark: this.from.remark,
        type: this.from.type
      }).then(data => {
        if (data.code === 200) {
          console.log(data.success)
          this.fetchData()
        }
      }).catch(error => {
        console.log(error)
      })
    },
    // 查看详情
    handleClick(row) {
      this.handleVisible = true
      this.handleRow = row
    },
    // 点击编辑
    handleEdit(row) {
      this.editVisible = true
      this.editRow = row
    },
    // 取消编辑
    hideEdit() {
      this.editVisible = false
    },
    // 确定编辑
    sureEdit() {
      this.editVisible = false
      noticeEdit({
        id: this.editRow.id,
        content: this.editRow.content, // 公告内容
        images: this.editRow.images, // 图片
        remark: this.editRow.remark, // 备注
        type: this.editRow.type
      }).then(data => {
        if (data.code === 200) {
          console.log(data.success)
        }
      }).catch(error => {
        console.log(error)
      })
    },
    // 上一页
    pre() {
      this.pageNo--
      if (this.pageNo < 1) {
        this.pageNo = 1
      }
      this.fetchData()
    },
    // 下一页
    nex() {
      this.pageNo++

      if (this.pageNo >= this.total) {
        this.pageNo = this.total
      }
      this.fetchData()
    },
    // 点击
    handleCurrentChange(currentPage) {
      this.pageNo = currentPage
      this.fetchData()
    },
    handleSizeChange(val) {
      this.pageSize = val
      this.handleCurrentChange(this.pageNo)
      this.fetchData()
    },
    // 添加相册集
    addIphone() {

    },
    // 新增图标
    uploadFile(e) {
      const files = e.target.files
      if (files.length) {
        const formData = new FormData()
        formData.append('multipartFile', files[0])
        uploadQNImg(formData).then((res) => {
          // 新增的
          this.Icon = res.data
        })
      }
    },
    // 页面显示的大图标
    changeImg(row) {
      this.imgVisible = true
      this.editImg = row
    }
  }
}

</script>
<style scoped>
.header{
    width: 100%;
    height: 60px;
    line-height: 60px;
    display: flex;
}
 .header  .header-left{
    flex: 1;
    font-weight: 500;
    font-size:20px ;
}
.header  .header-right{
    width: 200px;
}

.box {
  box-sizing: border-box;
  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;
}
.one {
  display: flex;
}
.one span {
  width: 100px;
  text-align: left;
  height: 40px;
  line-height: 40px;
}
/* 新增图标 */
.iconIMG{
      width: 250px;
      height: 150px;
      border: 1px solid #eee;
      position: relative;
      top: -30px;
      left: 80px;
}
/* 页面显示的图标 */
.headJig{
  cursor: pointer;
}
</style>
